# Name of this GitHub Actions workflow.
name: Semgrep Security Scan

on:
  # Scan in PRs:
  pull_request:
    branches: ["main", "develop"]
  # Scan on-demand through GitHub Actions interface:
  workflow_dispatch:
    inputs:
      scan_depth:
        description: 'Scan depth (auto, deep, medium, shallow)'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - deep
          - medium
          - shallow
  # Scan mainline branches and report all findings:
  push:
    branches: ["main", "develop"]
  # Schedule the CI job (this method uses cron syntax):
  schedule:
    - cron: '0 15 * * *' # Run every day at 15:00 UTC, which is 00:00 JST.

# Limit concurrent runs of this workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write  # For GitHub Code Scanning integration
  pull-requests: write    # For PR comments

jobs:
  semgrep:
    # User definable name of this GitHub Actions job.
    name: semgrep-scan
    # If you are self-hosting, change the following `runs-on` value:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Set a timeout to prevent long-running jobs

    container:
      # A Docker image with Semgrep installed. Do not change this.
      image: semgrep/semgrep:latest

    # Skip any PR created by dependabot to avoid permission issues:
    if: (github.actor != 'dependabot[bot]')

    steps:
      # Fetch project source with GitHub Actions Checkout. Use either v3 or v4.
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Fetch all history for better analysis

      # Set up cache for Semgrep
      - name: Cache Semgrep rules
        uses: actions/cache@v4
        with:
          path: ~/.semgrep
          key: ${{ runner.os }}-semgrep-${{ hashFiles('**/.semgrepignore') }}
          restore-keys: |
            ${{ runner.os }}-semgrep-

      # Determine scan depth
      - name: Set scan depth
        id: scan-depth
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "SCAN_DEPTH=${{ github.event.inputs.scan_depth }}" >> $GITHUB_ENV
          else
            echo "SCAN_DEPTH=auto" >> $GITHUB_ENV
          fi

      # Run Semgrep scan with enhanced configuration
      - name: Run Semgrep scan
        run: |
          semgrep scan \
            --config=p/default \
            --config=p/owasp-top-ten \
            --config=p/javascript \
            --config=p/typescript \
            --config=p/nodejs \
            --config=p/angular \
            --severity=ERROR \
            --metrics=off \
            --json > semgrep-results.json
        env:
          SEMGREP_TIMEOUT: 300

      # Upload scan results as an artifact
      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: semgrep-results.json
          retention-days: 7

      # Generate GitHub Code Scanning compatible output
      - name: Convert Semgrep output to SARIF
        run: |
          semgrep scan --sarif --output=semgrep-results.sarif

      # Upload SARIF file for GitHub Code Scanning
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results.sarif
          category: semgrep

      # Post results as PR comment if this is a pull request
      - name: Post results to PR
        if: github.event_name == 'pull_request'
        run: |
          FINDINGS=$(cat semgrep-results.json | jq -r '.results | length')
          if [ $FINDINGS -gt 0 ]; then
            echo "::warning::Semgrep found $FINDINGS potential security issues. See the uploaded artifacts for details."
            
            # Create a comment on the PR
            COMMENT="## 🔍 Semgrep Security Scan Results\n\n"
            COMMENT+="Found **$FINDINGS** potential security issues.\n\n"
            COMMENT+="[View detailed results in the workflow artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n"
            
            # Add the first 5 findings to the comment
            if [ $FINDINGS -gt 0 ]; then
              COMMENT+="### Top findings:\n\n"
              cat semgrep-results.json | jq -r '.results[0:5] | .[] | "- **" + .check_id + "**: " + .extra.message + " in `" + .path + "` (line " + (.start.line | tostring) + ")\n"' >> pr_comment.txt
              COMMENT+=$(cat pr_comment.txt)
            fi
            
            echo "$COMMENT" > pr_comment.md
            
            # Post comment to PR using GitHub CLI
            gh pr comment ${{ github.event.pull_request.number }} -F pr_comment.md
          else
            echo "No security issues found by Semgrep."
          fi
        env:
          GH_TOKEN: ${{ github.token }}